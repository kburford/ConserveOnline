=================================
Adding, editing and viewing pages
=================================

First, some preparations:

    >>> import sys
    >>> from Testing.makerequest import makerequest
    >>> from elementtree.ElementTree import tostring as ettostring
    >>> from lxml.etree import XML, tostring as lxtostring
    >>> from zope.app.publisher.browser import queryDefaultViewName
    >>> from zope.component import getMultiAdapter
    >>> from zope.interface import Interface
    >>> from Products.ATContentTypes.tests.utils import FakeRequestSession
    >>> from Products.COL3.interfaces.workspace import IWorkspace
    >>> from Products.COL3.tests.xml_validator import XMLValidator
    >>> validator = XMLValidator()
    >>> def tostring(elem):
    ...     return lxtostring(XML(ettostring(elem)), pretty_print=True)
    >>> def prepWorkspaceAndRequest(app=app):
    ...     app = makerequest(app.aq_base)
    ...     workspace = app.plone.workspaces['workspace'].unrestrictedTraverse('++skin++col') 
    ...     return workspace, workspace.REQUEST
    >>> self.setRoles(['Member','Community Member'])

Now let's create a workspace which holds the documents folder.

    >>> app.plone.workspaces.invokeFactory('Workspace', 'workspace') and None
    >>> self.login() # aquire the Workspace Manager group and role

This workspace already contains a 'documents' folder by default:

    >>> from Products.COL3.interfaces.workspace import IWorkspaceDocumentsFolder
    >>> workspace, request = prepWorkspaceAndRequest()
    >>> documents = workspace.documents
    >>> IWorkspaceDocumentsFolder.providedBy(documents)
    True

Page View
=========

Let's create a page to see what its view is like

    >>> documents.invokeFactory('COLPage', 'apage') and None
    >>> page = documents['apage']
    >>> page.update(title="Condors United", text="""
    ... <div xmlns="http://www.w3.org/1999/xhtml">
    ...  <p>This is <em>Some Text</em>.</p>
    ... </div>
    ... """.strip())

Pages have an XML default view

    >>> vname = queryDefaultViewName(page, request)
    >>> print vname
    view.html

This default view is used to render the Page on the front-end, including its title,
body, and available actions:

    >>> view = getMultiAdapter((page, request), Interface, name=vname)
    >>> xml = view.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(xml)) # doctest: -REPORT_NDIFF

It contains a "view" tag that identifies this view for the front-end:

	>>> print tostring(xml.find('view')) # doctest: +XMLDATA
	<view name="view.html" type="page" title="Condors United" section="workspaces"/>

This "view" tag doesn't actually do anything, since all the information for
the FE actually comes from the "resource" tag

    >>> print xml.find('resource/title').text
    Condors United
    >>> print tostring(xml.find('resource/text')) # doctest: +XMLDATA
    <text>
        <div xmlns="http://www.w3.org/1999/xhtml">
            <p>This is <em>Some Text</em>.</p>
        </div>
    </text>

As workspace manager, the current user has permission to edit and delete the page:

    >>> print tostring(xml.find('menus/actionmenu')) # doctest: +XMLDATA
    <actionmenu>
	  <entry href="http://foo/plone/workspaces/workspace/documents/apage/@@edit.html">Edit</entry>
	  <entry href="http://foo/plone/workspaces/workspace/documents/apage/@@delete.html">Delete</entry>
	</actionmenu>

An anonymous user doesn't have such rights

    >>> self.logout()
    >>> view = getMultiAdapter((page, request), Interface, name=vname)
    >>> xml = view.getResponse()
    >>> xml.find('menus/actionmenu') is None
    True

Page Edit
=========

    >>> self.login()
    >>> workspace, request = prepWorkspaceAndRequest()
    >>> page = workspace.documents['apage']
    >>> editFormPage = page.restrictedTraverse("@@edit.html")
    >>> editFormPageXML = editFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(editFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expectec XSLT in the frontend:

    >>> print tostring(editFormPageXML[0])
    <view name="edit.html" section="workspaces" title="Edit Page: Condors United" type="page"/>

And the formcontroller element shows a form for editing the page.

    >>> print tostring(editFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.title" required="required" widget="text">
        <label>Title</label>
        <value xml:space="preserve">Condors United</value>
      </field>
      <field name="form.text" required="required" widget="editor">
        <label>Content</label>
        <value xml:space="preserve">
          <html:div xmlns:html="http://www.w3.org/1999/xhtml">
    <html:p>This is <html:em>Some Text</html:em>.</html:p>
    </html:div>
        </value>
      </field>
      <field name="form.labels" required="required" widget="labels">
        <label>Keywords</label>
      </field>
      <field name="form.document_type" widget="checkboxgroup">
        <label>Purpose</label>
        <description>Describes the purpose of the document, if applicable.</description>
        <value vocabulary="documenttypes"/>
      </field>
      <field name="form.is_private" required="required" widget="radiogroup">
        <label>Private?</label>
        <value>
          <option selected="selected" value="False">No</option>
          <option value="True">Yes (only workspace members can see the file)</option>
        </value>
      </field>
      <submit name="form.actions.save">Save</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

Let's edit the page

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> page = workspace.documents['apage']
    >>> request.form['form.title'] = 'My New Page Title'
    >>> request.form['form.text'] = '<h1>My Newly Formated Page text</h1>'
    >>> request.form['form.labels'] = ['One Label', 'Two Labels']
    >>> request.form['form.document_type-empty-marker'] = '1'
    >>> request.form['form.document_type'] = ['casestudies', 'datasets']
    >>> request.form['form.is_private'] = 'False'
    >>> request.form['form.actions.save'] = 'Save'
    >>> print page.restrictedTraverse('@@edit.html').getResponse()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/documents/...
    >>> print page.Title()
    My New Page Title
    >>> print "\n".join(sorted(page.getDocument_type()))
    casestudies
    datasets

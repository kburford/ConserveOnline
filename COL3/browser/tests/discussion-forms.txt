=============================
Discussion add and edit forms
=============================

Discussion boards are implemented as number of nested content objects that
are added and edited through some forms.

First, some preparations:

    >>> import sys
    >>> from Testing.makerequest import makerequest
    >>> from elementtree.ElementTree import tostring as ettostring
    >>> from lxml.etree import XML, tostring as lxtostring
    >>> from Products.ATContentTypes.tests.utils import FakeRequestSession
    >>> from Products.COL3.interfaces.workspace import IWorkspace
    >>> from Products.COL3.tests.xml_validator import XMLValidator
    >>> validator = XMLValidator()
    >>> def tostring(elem):
    ...     return lxtostring(XML(ettostring(elem)), pretty_print=True)
    >>> def prepWorkspaceAndRequest(app=app):
    ...     app = makerequest(app.aq_base)
    ...     workspace = app.plone.workspaces['workspace'].unrestrictedTraverse('++skin++col')
    ...     return workspace, workspace.REQUEST
    >>> self.setRoles(['Member','Community Member'])

Now let's create a workspace which holds the discussion board'.

    >>> app.plone.workspaces.invokeFactory('Workspace', 'workspace') and None
    >>> self.login() # aquire the Workspace Manager group and role

This workspace already contains a discussion board by default:

    >>> from Products.Ploneboard.interfaces import IForum
    >>> workspace, request = prepWorkspaceAndRequest()
    >>> IForum.providedBy(workspace.discussion)
    True

Due to the breadcrumbs, it should have a title of "Discussions"

    >>> print workspace.discussion.Title()
    Discussions

Creating discussion topics
==========================

Discussion topics can be created through the "add-topic.html" view on the discussion board

    >>> addFormPage = workspace.discussion.restrictedTraverse("@@add-topic.html")
    >>> addFormPageXML = addFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(addFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expected XSLT in the frontend:

    >>> print tostring(addFormPageXML[0])
    <view name="add.html" section="workspaces" title="Add Discussion" type="topic"/>

And the formcontroller element shows a form for adding a topic, which is a simple form with two fields,
one for the title and another for the body of the discussion topic:

    >>> print tostring(addFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
        <field name="form.title" required="required" widget="text">
            <label>Title</label>
        </field>
        <field name="form.description" required="required" widget="editor">
            <label>Content</label>
            <description>Enter the full text of your entry above</description>
        </field>
        <submit name="form.actions.add">Save</submit>
        <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the TopicAddForm fragment.

    >>> from Products.COL3.browser.discussion import TopicAddForm
    >>> addFormFragment = TopicAddForm(workspace.discussion, request).asElement()

Since the behaviour of form widgets tested elsewhere, we'll just make sure this
add-form can be canceled or correctly submited. Canceling the form should take
us back to the discussion board:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.title'] = u'My Topic Title'
    >>> request.form['form.description'] = u'<h1>My Formated Topic text </h1>'
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> TopicAddForm(workspace.discussion, request).asElement()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion

Where as clicking on "Add" should redirect us to the topic in question

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.title'] = u'My Topic Title'
    >>> request.form['form.description'] = u'<h1>My Formated Topic text </h1>'
    >>> request.form['form.actions.add'] = 'Add'
    >>> TopicAddForm(workspace.discussion, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion/...

The created topic is a subobject of the discussion board

    >>> topic_url = sys.exc_info()[1].url
    >>> topic_id = topic_url.split('/')[-1]
    >>> from Products.Ploneboard.interfaces import IConversation
    >>> IConversation.providedBy(workspace.discussion[topic_id])
    True

Editing a topic is similar. The "edit.html" page of topics renders a page
similar to the above:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> editFormPage = topic.restrictedTraverse("@@edit.html")
    >>> editFormPageXML = editFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(editFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expectec XSLT in the frontend:

    >>> print tostring(editFormPageXML[0])
    <view name="edit.html" section="workspaces" title="Edit Discussion" type="topic"/>

And the formcontroller element shows a form for editing a topic, similar to the adding one.
Notice however that it contains the values set through the add form above in the <value> tags:

    >>> print tostring(editFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
        <field name="form.title" required="required" widget="text">
            <label>Title</label>
            <value xml:space="preserve">My Topic Title</value>
        </field>
        <field name="form.description" required="required" widget="editor">
            <label>Content</label>
            <description>Enter the full text of your entry above</description>
            <value xml:space="preserve">
               <html:div xmlns:html="http://www.w3.org/1999/xhtml" class="tinyFix">
                  <html:h1>My Formated Topic text</html:h1>
               </html:div>
            </value>
        </field>
        <submit name="form.actions.save">Save</submit>
        <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the TopicEditForm fragment.

    >>> from Products.COL3.browser.discussion import TopicEditForm
    >>> editFormFragment = TopicEditForm(topic, request).asElement()
    >>> tostring(editFormFragment) == tostring(editFormPageXML[1])
    True

Canceling the form should take us back to the topic without altering it:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> request.form['form.title'] = u'My New Topic Title'
    >>> request.form['form.description'] = u'<h1>My Newly Formated Topic text</h1>'
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> TopicEditForm(topic, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion/...
    >>> print topic.getTitle()
    My Topic Title
    >>> print topic.getRawDescription() # doctest: +XMLDATA
    <html:div class="tinyFix" xmlns:html="http://www.w3.org/1999/xhtml">
       <html:h1>My Formated Topic text</html:h1> 
    </html:div>

Submitting the form should change the topic accordingly and redirect to the
default topic view.

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> request.form['form.title'] = u'My New Topic Title'
    >>> request.form['form.description'] = u'<h1>My Newly Formated Topic text</h1>'
    >>> request.form['form.actions.save'] = 'Save'
    >>> print tostring(TopicEditForm(topic, request).asElement()) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion/...
    >>> print topic.getTitle()
    My New Topic Title
    >>> print topic.getRawDescription() # doctest: +XMLDATA
    <html:div class="tinyFix" xmlns:html="http://www.w3.org/1999/xhtml">
      <html:h1>My Newly Formated Topic text</html:h1>
    </html:div>

Adding a Comment to a Topic
===========================

Comments are created through a form on the default view on the topic
itself, which is called "view-topic.html"

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> addFormPage = topic.restrictedTraverse("@@view-topic.html")
    >>> addFormPageXML = addFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(addFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expected XSLT in the frontend:

    >>> print tostring(addFormPageXML[0]) # doctest: +XMLDATA
    <view name="view.html" section="workspaces" title="My New Topic Title"
          type="topic"/>

And the formcontroller element shows a form for adding views, which is a simple form with two fields,
one for the title and another for the body of the comment:

    >>> print tostring(addFormPageXML.find('formcontroller')) # doctest: +XMLDATA
    <formcontroller action="http://foo">
	    <field name="form.text" required="required" widget="editor">
		     <label>Reply</label>
		     <description>Enter the full text of your entry above</description>
	    </field>
	    <submit name="form.actions.add">Save</submit>
	    <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the CommentAddForm fragment.

    >>> from Products.COL3.browser.discussion import CommentAddForm
    >>> addFormFragment = CommentAddForm(topic, request).asElement()
    >>> tostring(addFormFragment) == tostring(addFormPageXML[7])
    True

Since the behaviour of form widgets tested elsewhere, we'll just make sure this
add-form can be canceled or correctly submited. Canceling the form should take
us back to the topic:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.text'] = u'<h1>My Brand New Comment Text </h1>'
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> CommentAddForm(workspace.discussion[topic_id], request).asElement()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion/...

Where as clicking on "Add" should redirect us to the containing topic

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.text'] = u'<h1>My Brand New Comment Text</h1>'
    >>> request.form['form.actions.add'] = 'Add'
    >>> CommentAddForm(workspace.discussion[topic_id], request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion/...

The created comment is a subobject of the containing topic

    >>> comment_id = topic.contentIds()[0]
    >>> comment = topic[comment_id]
    >>> from Products.Ploneboard.interfaces import IComment
    >>> IComment.providedBy(comment)
    True

And should be available on the topic view

    >>> viewTopicPage = topic.restrictedTraverse("@@view-topic.html")
    >>> viewTopicXML = viewTopicPage.getResponse()
    >>> comments = viewTopicXML.findall('batch/items/item')
    >>> len(comments)
    1
    >>> comment = comments.pop()

Notice how, at first, the comment title is the topic title

    >>> print comment.find('title').text
    My New Topic Title
    >>> print comment.find('author').text
    test_user_1_
    >>> print tostring(comment.find('text')) # doctest: +XMLDATA
    <text>
	    <html:div xmlns:html="http://www.w3.org/1999/xhtml" class="tinyFix">
	    	<html:h1>My Brand New Comment Text</html:h1>
	    </html:div>
    </text>

Topic action menus
==================

The Topic view mentioned above has a <menu> which should contain an
<actionmenu> section listing which actions are possible for the current user.

In the Topic view, this meens editing and deleting the topic:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> topicViewPage = topic.restrictedTraverse("@@view-topic.html")
    >>> topicViewPageXML = topicViewPage.getResponse()
    >>> menusFragment = topicViewPageXML.find('menus')
    >>> print tostring(menusFragment) # doctest: +ELLIPSIS
    <menus>
      <actionmenu>
        <entry href="http://foo/plone/workspaces/workspace/discussion/.../@@edit.html">Edit</entry>
        <entry href="http://foo/plone/workspaces/workspace/discussion/.../@@delete.html">Delete</entry>
      </actionmenu>
    </menus>

Topic deletion
==============

Topics can be deleted by the workspace manager. This is done through the
"delete.html" view of the topic. Notice that this is a confirmation view:
merely invoking it won't actually cause the deletion:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> topic = workspace.discussion[topic_id]
    >>> topicDeletePage = topic.restrictedTraverse("@@delete.html")
    >>> topicDeletePageXML = topicDeletePage.getResponse()
    >>> viewFragment = topicDeletePageXML.find('view')
    >>> print tostring(viewFragment) # doctest: +XMLDATA
    <view name="delete.html" type="topic" title="Delete Discussion" section="workspaces"/>

Notice how the topic is still present:

    >>> topic = workspace.discussion[topic_id]

Now if we invoke the view, passing a confirmation parameter, the topic gets
actually deleted and the user is redirected to the discussion board:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request['confirm'] = '1'
    >>> topic = workspace.discussion[topic_id]
    >>> topicDeletePage = topic.restrictedTraverse("@@delete.html")
    >>> topicDeletePageXML = topicDeletePage.getResponse()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/discussion

XXX Test different users for different actions. e.g. ws members should be able
XXX to edit topics according to screen 52

XXX Test comment editing

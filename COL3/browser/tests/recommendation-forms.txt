====================
Recommendation Forms
====================

The recommendations are implemented as annotations inside the LibraryFiles.
Here we exercise the forms for adding and removing recommendations.

First, some preparations:

    >>> import sys
    >>> from Testing.makerequest import makerequest
    >>> from elementtree.ElementTree import tostring as ettostring
    >>> from lxml.etree import XML, tostring as lxtostring
    >>> from Products.ATContentTypes.tests.utils import FakeRequestSession
    >>> from Products.COL3.interfaces.workspace import IWorkspace
    >>> from Products.COL3.tests.xml_validator import XMLValidator
    >>> validator = XMLValidator()
    >>> def tostring(elem):
    ...     return lxtostring(XML(ettostring(elem)), pretty_print=True)
    >>> def prepLibraryFileAndRequest(app=app):
    ...     app = makerequest(app.aq_base)
    ...     item = app.plone.library.libraryfile.unrestrictedTraverse('++skin++col')
    ...     return item, item.REQUEST
    >>> self.setRoles(['Member','Community Member'])

Now let's create a library file, so we can then add a recommendation later.

    >>> app.plone.library.invokeFactory('LibraryFile', 'libraryfile') and None
    >>> app.plone.library.libraryfile.setTitle('Title')
    >>> self.login() # aquire the Workspace Manager group and role
    >>> me = app.plone.portal_membership.getAuthenticatedMember()
    >>> me.setProperties(fullname="Test User", email="test@example.com")
    >>> libraryfile, request = prepLibraryFileAndRequest()


Creating Recommendations
------------------------

Recommendations can be created through the "recommendation.html" view on the
library file items:

    >>> recommendationFormPage = libraryfile.restrictedTraverse("@@recommendation.html")
    >>> recommendationFormPageXML = recommendationFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(recommendationFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expected XSLT in the frontend:

    >>> print tostring(recommendationFormPageXML[0])
    <view name="recommendation.html" section="library" title="Add A Rating: Title" type="recommendation"/>

And the formcontroller element shows a form for adding a recommendation, with
all the fields needed for its creation:

    >>> print tostring(recommendationFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.rating" required="required" widget="radiogroup">
        <label>How Do You Rate This Item?</label>
        <value>
          <option selected="selected" value="0"/>
          <option value="1">*</option>
          <option value="2">**</option>
          <option value="3">***</option>
          <option value="4">****</option>
          <option value="5">*****</option>
        </value>
      </field>
      <field name="form.title" widget="text">
        <label>Title of Your Recommendation</label>
      </field>
      <field name="form.text" widget="textarea">
        <label>Your Comments</label>
      </field>
      <field name="form.flagged" widget="radiogroup">
        <label>Flagged?</label>
        <value>
          <option selected="selected" value="False">No</option>
          <option value="True">Yes</option>
        </value>
      </field>
      <submit name="form.actions.apply">Submit</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the RecommendationForm fragment.

    >>> from Products.COL3.browser.recommendation import RecommendationForm
    >>> recommendationFragment = RecommendationForm(libraryfile, request).asElement()
    >>> tostring(recommendationFragment) == tostring(recommendationFormPageXML[1])
    True

Since the behaviour of form widgets tested elsewhere, we'll just make sure this
add-form can be canceled or correctly submited. Canceling the form should take
us back to the library file view:

    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> RecommendationForm(libraryfile, request).asElement()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view.html

Clicking on "Submit" should redirect to the library file view too:

    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['form.rating'] = '4'
    >>> request.form['form.title'] = 'My Recommendation Title'
    >>> request.form['form.text'] = 'The recommendation comments.'
    >>> request.form['form.actions.apply'] = 'Submit'
    >>> RecommendationForm(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view.html

The created recommendation is stored as an annotation in the library file.
We can access it this way:

    >>> from contentratings.interfaces import IUserRating
    >>> manager = IUserRating(libraryfile)
    >>> list(manager.all_raters())
    ['test_user_1_']
    >>> manager.userRating('test_user_1_') # doctest: +ELLIPSIS
    <RecommendationRating 4.0 by 'test_user_1_' on ...>
    >>> manager.numberOfRatings
    1

Editing Recommendation
----------------------

Recommendations can also be edited through the "recommendation.html" view on the
library file items:

    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> recommendationFormPage = libraryfile.restrictedTraverse("@@recommendation.html")
    >>> recommendationFormPageXML = recommendationFormPage.getResponse()

The formcontroller element shows a form for editing a recommendation, with
all the fields containing the current values:

    >>> print tostring(recommendationFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.rating" required="required" widget="radiogroup">
        <label>How Do You Rate This Item?</label>
        <value>
          <option value="0"/>
          <option value="1">*</option>
          <option value="2">**</option>
          <option value="3">***</option>
          <option selected="selected" value="4">****</option>
          <option value="5">*****</option>
        </value>
      </field>
      <field name="form.title" widget="text">
        <label>Title of Your Recommendation</label>
        <value xml:space="preserve">My Recommendation Title</value>
      </field>
      <field name="form.text" widget="textarea">
        <label>Your Comments</label>
        <value xml:space="preserve">The recommendation comments.</value>
      </field>
      <field name="form.flagged" widget="radiogroup">
        <label>Flagged?</label>
        <value>
          <option selected="selected" value="False">No</option>
          <option value="True">Yes</option>
        </value>
      </field>
      <submit name="form.actions.apply">Submit</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

Profanity Filter
----------------

User should not be allowed to use profane words on their recommendations:

    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['form.rating'] = '5'
    >>> request.form['form.title'] = 'Oh my god!'
    >>> request.form['form.text'] = 'This is fucking nice!'
    >>> request.form['form.actions.apply'] = 'Submit'
    >>> RecommendationForm(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view.html

The recommendation should be marked as bad content and the number and
the average of ratings must continue the same:

    >>> manager = IUserRating(libraryfile)
    >>> rating = manager.userRating('test_user_1_')
    >>> rating.flagged
    False
    >>> rating.badcontent
    True
    >>> manager.numberOfRatings
    0
    >>> manager.averageRating
    0.0

There should also be generated an email:

    >>> len(app.plone.MailHost.sent)
    1
    >>> from_, to_, message = app.plone.MailHost.sent[0][0]
    >>> from_
    'test@example.com'
    >>> to_
    ['test@example.com']
    >>> print message.as_string() # doctest: +ELLIPSIS
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    To: test@example.com
    From: test@example.com
    Subject: Profanity - Rating Post
    <BLANKLINE>
    <BLANKLINE>
    Bad content detected in a rating post:
    <BLANKLINE>
      - Rating Author: test_user_1_
      - Rating Date..: ...
      - Content......: Title
      - Comment Title: Oh my god!
      - Comment URL..: http://foo/plone/library/libraryfile/recommendation.html?username=test_user_1_
    <BLANKLINE>
    The comment body has this content:
    <BLANKLINE>
    This is fucking nice!
    <BLANKLINE>

Cleanup the persistent stuff:

    >>> app.plone.MailHost.sent = []

Once the profane words are removed from the recommendation, the rating
numbers are updated:

    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['form.rating'] = '4'
    >>> request.form['form.title'] = 'Oh my god!'
    >>> request.form['form.text'] = 'This is so nice!'
    >>> request.form['form.actions.apply'] = 'Submit'
    >>> RecommendationForm(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view.html

The bad content mark should have beed removed from the recommendation and
the number and the average of ratings should have been updated:

    >>> manager = IUserRating(libraryfile)
    >>> rating = manager.userRating('test_user_1_')
    >>> rating.flagged
    False
    >>> rating.badcontent
    False
    >>> manager.numberOfRatings
    1
    >>> manager.averageRating
    4.0

No mails should have been generated:

    >>> len(app.plone.MailHost.sent)
    0

Reporting Recommendations
-------------------------

Now let's try the report recommendation:

    >>> from Products.COL3.browser.recommendation import RecommendationReportPage
    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['username'] = 'test_user_1_'
    >>> reportFormPageXML = RecommendationReportPage(libraryfile, request).getResponse()

XML should validate against tnc.rng schema.

    >>> validator.validateString(tostring(reportFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expected XSLT in the frontend:

    >>> print tostring(reportFormPageXML[0])
    <view name="report-recommendation.html" section="library" title="Report: Title" type="recommendation"/>

And the formcontroller element shows a form for adding a recommendation, with
all the fields needed for its creation:

    >>> print tostring(reportFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.text" required="required" widget="textarea">
        <label>Why Do You Believe These Rating Comments Are Inappropriate?</label>
      </field>
      <submit name="form.actions.add">Submit</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the RecommendationForm fragment.

    >>> from Products.COL3.browser.recommendation import RecommendationReportFragment
    >>> report_view = RecommendationReportFragment(libraryfile, request).asElement()
    >>> tostring(report_view) == tostring(reportFormPageXML[0])
    True

Clicking on "Cancel" should redirect to the library file view recommendations page,
without sending any mail nor flagging the rating:

    >>> from Products.COL3.browser.recommendation import RecommendationReportForm
    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['username'] = 'test_user_1_'
    >>> request.form['form.text'] = "Cancelling"
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> RecommendationReportForm(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view-recommendations.html

The user rating shouldn't be flagged:

    >>> manager = IUserRating(libraryfile)
    >>> rating = manager.userRating('test_user_1_')
    >>> rating.flagged
    False
    >>> rating.badcontent
    False
    >>> manager.numberOfRatings
    1
    >>> manager.averageRating
    4.0

No mail should be generated:

    >>> len(app.plone.MailHost.sent)
    0

Clicking on "Submit" should redirect to the library file view recommendations page:

    >>> from Products.COL3.browser.recommendation import RecommendationReportForm
    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['username'] = 'test_user_1_'
    >>> request.form['form.text'] = "Because it's bad!"
    >>> request.form['form.actions.add'] = 'Submit'
    >>> RecommendationReportForm(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view-recommendations.html

The user rating should now be flagged and the number and average of
ratings will continue the same:

    >>> manager = IUserRating(libraryfile)
    >>> rating = manager.userRating('test_user_1_')
    >>> rating.flagged
    True
    >>> rating.badcontent
    False
    >>> manager.numberOfRatings
    1
    >>> manager.averageRating
    4.0

There should also be generated an email:

    >>> len(app.plone.MailHost.sent)
    1
    >>> from_, to_, message = app.plone.MailHost.sent[0][0]
    >>> from_
    'test@example.com'
    >>> to_
    ['test@example.com']
    >>> print message.as_string() # doctest: +ELLIPSIS
    Content-Type: text/plain; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    To: test@example.com
    From: test@example.com
    Subject: Inappropriate Content Submission
    <BLANKLINE>
    <BLANKLINE>
    Rating info:
    <BLANKLINE>
      - Rating Author: test_user_1_
      - Rating Date..: ...
      - Content Title: Title
      - Content URL..: http://foo/plone/library/libraryfile/recommendation.html?username=test_user_1_
    <BLANKLINE>
    Reported by test_user_1_, with the following comment:
    <BLANKLINE>
    Because it's bad!
    <BLANKLINE>

Deleting Recommendations
------------------------

And finally, delete the recommendation:

    >>> from Products.COL3.browser.recommendation import RecommendationDeleteView
    >>> libraryfile, request = prepLibraryFileAndRequest()
    >>> request.form['confirm'] = 1
    >>> delete_view = RecommendationDeleteView(libraryfile, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/library/libraryfile/view.html
    >>> manager = IUserRating(libraryfile)
    >>> list(manager.all_raters())
    []
    >>> manager.numberOfRatings
    0

========================
Event add and edit forms
========================

The workspace calendar is implemented as a events inside a specific folder. Here we
exercise the forms for adding and editing these events.

First, some preparations:

    >>> import sys
    >>> from Testing.makerequest import makerequest
    >>> from elementtree.ElementTree import tostring as ettostring
    >>> from lxml.etree import XML, tostring as lxtostring
    >>> from Products.ATContentTypes.tests.utils import FakeRequestSession
    >>> from Products.COL3.interfaces.workspace import IWorkspace
    >>> from Products.COL3.tests.xml_validator import XMLValidator
    >>> validator = XMLValidator()
    >>> def tostring(elem):
    ...     return lxtostring(XML(ettostring(elem)), pretty_print=True)
    >>> def prepWorkspaceAndRequest(app=app):
    ...     app = makerequest(app.aq_base)
    ...     workspace = app.plone.workspaces['workspace'].unrestrictedTraverse('++skin++col') 
    ...     return workspace, workspace.REQUEST
    >>> self.setRoles(['Member','Community Member'])

Now let's create a workspace which holds the calendar folder.

    >>> app.plone.workspaces.invokeFactory('Workspace', 'workspace') and None
    >>> self.login() # aquire the Workspace Manager group and role

This workspace already contains a calendar folder by default:

    >>> from Products.COL3.interfaces.workspace import IWorkspaceCalendar
    >>> workspace, request = prepWorkspaceAndRequest()
    >>> IWorkspaceCalendar.providedBy(workspace.calendar)
    True

Creating events
===============

Events can be created throug the "add-event.html" view on the calendar folder

    >>> addFormPage = workspace.calendar.restrictedTraverse("@@add-event.html")
    >>> addFormPageXML = addFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(addFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expected XSLT in the frontend:

    >>> print tostring(addFormPageXML[0])
    <view name="add.html" section="workspaces" title="Add Event" type="event"/>

And the formcontroller element shows a form for adding an event, with all the
fields needed for event creation:

    >>> print tostring(addFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.title" widget="text" required="required">
        <label>Title</label>
      </field>
      <field name="form.startDate" widget="calendar" required="required">
        <label>Starts</label>
        <description>Select  Year : Month : Day and time that this event starts.</description>
      </field>
      <field name="form.endDate" widget="calendar" required="required">
        <label>Ends</label>
        <description>Select  Year : Month : Day and time that this event finishes.</description>
      </field>
      <field name="form.location" widget="text">
        <label>Location</label>
        <description>Short information about the location of the event.</description>
      </field>
      <field name="form.text" widget="editor">
        <label>Content</label>
        <description>Rich text describing the information about the event.</description>
      </field>
      <field name="form.attendees" widget="textarea">
        <label>Attendees</label>
        <description>Provide a list of attendee information, one per line.</description>
      </field>
      <field name="form.contactName" required="required" widget="text">
        <label>Contact Name</label>
        <description>The full name of this event's point of contact.</description>
      </field>
      <field name="form.contactEmail" required="required" widget="text">
        <label>Contact Email</label>
        <description>Email address for this event's point of contact.</description>
      </field>
      <submit name="form.actions.add">Save</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the EventAddForm fragment.  

    >>> from Products.COL3.browser.calendar import EventAddForm
    >>> addFormFragment = EventAddForm(workspace.calendar, request).asElement()
    >>> tostring(addFormFragment) == tostring(addFormPageXML[1])
    True

Since the behaviour of form widgets tested elsewhere, we'll just make sure this
add-form can be canceled or correctly submited. Canceling the form should take
us back to the calendar view board:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> EventAddForm(workspace.calendar, request).asElement()
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/calendar

Where as clicking on "Add" should redirect to the event view:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request.form['form.title'] = 'My Event Title'
    >>> request.form['form.startDate'] = '2007-05-07 03:30'
    >>> request.form['form.endDate'] = '2007-05-08 04:30'
    >>> request.form['form.attendees'] = ''
    >>> request.form['form.contactName'] = 'Someone'
    >>> request.form['form.contactEmail'] = 'someone@email.com'
    >>> request.form['form.actions.add'] = 'Add'
    >>> EventAddForm(workspace.calendar, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/calendar/my-event-title

The created event is a subobject of the calendar folder. Its id is the
normalization of the title

    >>> event_id = 'my-event-title'
    >>> from Products.ATContentTypes.interface.event import IATEvent
    >>> IATEvent.providedBy(workspace.calendar[event_id])
    True

Editing an event is similar. The "edit.html" page of events renders a page
similar to the above:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> event = workspace.calendar[event_id]
    >>> editFormPage = event.restrictedTraverse("@@edit.html")
    >>> editFormPageXML = editFormPage.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(editFormPageXML)) # doctest: -REPORT_NDIFF

The view element is there to match against the expectec XSLT in the frontend:

    >>> print tostring(editFormPageXML[0])
    <view name="edit.html" section="workspaces" title="Edit Event" type="event"/>

And the formcontroller element shows a form for editing an event, similar to the adding one.
Notice however that it contains the values set through the add form above in the <value> tags:

    >>> print tostring(editFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
	    <field name="form.title" required="required" widget="text">
	        <label>Title</label>
	        <value xml:space="preserve">My Event Title</value>
	    </field>
	    <field name="form.startDate" required="required" widget="calendar">
	        <label>Starts</label>
	        <description>Select  Year : Month : Day and time that this event starts.</description>
	        <value xml:space="preserve">2007-05-07 03:30</value>
	    </field>
	    <field name="form.endDate" required="required" widget="calendar">
	        <label>Ends</label>
	        <description>Select  Year : Month : Day and time that this event finishes.</description>
	        <value xml:space="preserve">2007-05-08 04:30</value>
	    </field>
	    <field name="form.location" widget="text">
	        <label>Location</label>
	        <description>Short information about the location of the event.</description>
	    </field>
	    <field name="form.text" widget="editor">
	        <label>Content</label>
	        <description>Rich text describing the information about the event.</description>
	    </field>
	    <field name="form.attendees" widget="textarea">
	        <label>Attendees</label>
	        <description>Provide a list of attendee information, one per line.</description>
	    </field>
	    <field name="form.contactName" required="required" widget="text">
	        <label>Contact Name</label>
	        <description>The full name of this event's point of contact.</description>
                <value xml:space="preserve">Someone</value>
	    </field>
	    <field name="form.contactEmail" required="required" widget="text">
	        <label>Contact Email</label>
	        <description>Email address for this event's point of contact.</description>
                <value xml:space="preserve">someone@email.com</value>
	    </field>
	    <submit name="form.actions.save">Save</submit>
	    <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

This fragment is generated by the EventEditForm fragment.

    >>> from Products.COL3.browser.calendar import EventEditForm
    >>> editFormFragment = EventEditForm(event, request).asElement()
    >>> tostring(editFormFragment) == tostring(editFormPageXML[1])
    True

Canceling the form should take us back to the event without altering it:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> event = workspace.calendar[event_id]
    >>> request.form['form.title'] = 'My New Event Title'
    >>> request.form['form.startDate'] = '2007-05-07 03:30'
    >>> request.form['form.endDate'] = '2007-05-08 04:30'
    >>> request.form['form.attendees'] = ''
    >>> request.form['form.contactName'] = 'Someone'
    >>> request.form['form.contactEmail'] = 'someone@email.com'
    >>> request.form['form.actions.cancel'] = 'Cancel'
    >>> EventEditForm(event, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/calendar/my-event-title
    >>> print event.Title()
    My Event Title

Submitting the form should change the event accordingly and redirect to the default event view:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> event = workspace.calendar[event_id]
    >>> request.form['form.title'] = u'My New Event Title'
    >>> request.form['form.startDate'] = u'2007-05-07 03:30'
    >>> request.form['form.endDate'] = u'2007-05-08 04:30'
    >>> request.form['form.attendees'] = ''
    >>> request.form['form.contactName'] = 'Someone'
    >>> request.form['form.contactEmail'] = 'someone@email.com'
    >>> request.form['form.actions.save'] = 'Save'
    >>> print tostring(EventEditForm(event, request).asElement()) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/calendar/my-event-title
    >>> print event.Title()
    My New Event Title

Trying to edit the event with inverted start and end date should cause an
invariant error to be reported in the respective widgets:

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> event = workspace.calendar[event_id]
    >>> request.form['form.title'] = u'My Newer Event Title'
    >>> request.form['form.startDate'] = u'2007-05-08 03:30'
    >>> request.form['form.endDate'] = u'2007-05-07 04:30'
    >>> request.form['form.attendees'] = ''
    >>> request.form['form.contactName'] = 'Someone'
    >>> request.form['form.contactEmail'] = 'someone@email.com'
    >>> request.form['form.actions.save'] = 'Save'
    >>> print tostring(EventEditForm(event, request).asElement()) # doctest: +XMLDATA
    <formcontroller action="http://foo">
	    <error>There were errors</error>
	    <field name="form.title" required="required" widget="text">
	        <label>Title</label>
	        <value xml:space="preserve">My Newer Event Title</value>
	    </field>
	    <field name="form.startDate" required="required" widget="calendar">
	        <label>Starts</label>
	        <description>Select  Year : Month : Day and time that this event starts.</description>
	        <value xml:space="preserve">2007-05-08 03:30</value>
	        <error>Start date must come before end date.</error>
	    </field>
	    <field name="form.endDate" required="required" widget="calendar">
	        <label>Ends</label>
	        <description>Select  Year : Month : Day and time that this event finishes.</description>
	        <value xml:space="preserve">2007-05-07 04:30</value>
	        <error>Start date must come before end date.</error>
	    </field>
	    <field name="form.location" widget="text">
	        <label>Location</label>
	        <description>Short information about the location of the event.</description>
	    </field>
	    <field name="form.text" widget="editor">
	        <label>Content</label>
	        <description>Rich text describing the information about the event.</description>
	    </field>
	    <field name="form.attendees" widget="textarea">
	        <label>Attendees</label>
	        <description>Provide a list of attendee information, one per line.</description>
	    </field>
	    <field name="form.contactName" required="required" widget="text">
	        <label>Contact Name</label>
	        <description>The full name of this event's point of contact.</description>
                <value xml:space="preserve">Someone</value>
	    </field>
	    <field name="form.contactEmail" required="required" widget="text">
	        <label>Contact Email</label>
	        <description>Email address for this event's point of contact.</description>
                <value xml:space="preserve">someone@email.com</value>
	    </field>
	    <submit name="form.actions.save">Save</submit>
	    <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

Now let's try to delete the event....

    >>> from Products.COL3.browser.calendar import EventDeleteView
    >>> event = workspace.calendar[event_id]
    >>> event.id
    'my-event-title'
    >>> request['confirm'] = 1
    >>> eventDeleteView = EventDeleteView(event, request).asElement() # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/workspace/calendar
    >>> workspace.calendar[event_id] # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    KeyError: 'my-event-title'
    
This is to test recently added functionality, there are now "+" signs on each day of the calendar
and when a user clicks on that it loads the event add form with the date prepopulated with the 
date from the date grid of the calendar where the plus sign is located

    >>> workspace, request = prepWorkspaceAndRequest()
    >>> request['ymd']='2009-12-12'
    >>> addFormPage = workspace.calendar.restrictedTraverse("@@add-event.html")
    >>> addFormPageXML = addFormPage.getResponse()
    >>> print tostring(addFormPageXML[1]) # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <field name="form.title" required="required" widget="text">
        <label>Title</label>
      </field>
      <field name="form.startDate" required="required" widget="calendar">
        <label>Starts</label>
        <description>Select  Year : Month : Day and time that this event starts.</description>
        <value xml:space="preserve">2009-12-12 00:00</value>
      </field>
      <field name="form.endDate" required="required" widget="calendar">
        <label>Ends</label>
        <description>Select  Year : Month : Day and time that this event finishes.</description>
        <value xml:space="preserve">2009-12-12 00:00</value>
      </field>
      <field name="form.location" widget="text">
        <label>Location</label>
        <description>Short information about the location of the event.</description>
      </field>
      <field name="form.text" widget="editor">
        <label>Content</label>
        <description>Rich text describing the information about the event.</description>
      </field>
      <field name="form.attendees" widget="textarea">
        <label>Attendees</label>
        <description>Provide a list of attendee information, one per line.</description>
      </field>
      <field name="form.contactName" required="required" widget="text">
        <label>Contact Name</label>
        <description>The full name of this event's point of contact.</description>
      </field>
      <field name="form.contactEmail" required="required" widget="text">
        <label>Contact Email</label>
        <description>Email address for this event's point of contact.</description>
      </field>
      <submit name="form.actions.add">Save</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

=========================
Workspace creation wizard
=========================

Here we document the functionality workspace creation form.

First, some preparations:

    >>> from Testing.makerequest import makerequest
    >>> from elementtree.ElementTree import tostring as ettostring
    >>> from lxml.etree import XML, tostring as lxtostring
    >>> from zope.app.publisher.browser import queryDefaultViewName
    >>> from Products.ATContentTypes.tests.utils import FakeRequestSession
    >>> from Products.CMFCore.utils import getToolByName
    >>> from Products.COL3.interfaces.workspace import IWorkspace
    >>> from Products.COL3.interfaces.workspace import IWorkspaceMemberManagement
    >>> from Products.COL3.tests.xml_validator import XMLValidator
    >>> validator = XMLValidator()
    >>> SESSION = FakeRequestSession()
    >>> def tostring(elem):
    ...     return lxtostring(XML(ettostring(elem)), pretty_print=True)
    >>> def prepWorkspaceContainerAndRequest(app=app, SESSION=SESSION):
    ...     app = makerequest(app.aq_base).unrestrictedTraverse('++skin++col')
    ...     request = app.REQUEST
    ...     request['SESSION'] = SESSION
    ...     return app.plone.workspaces, request
    >>> self.setRoles(['Member','Community Member'])

The workspace creation view
=================================

This is the page that holds the view and form fragments for workspace creation:

    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> v = context.restrictedTraverse("@@add-workspace.html")
    >>> tree = v.getResponse()

XML should validate against tnc.rng schema.
    >>> validator.validateString(tostring(tree)) # doctest: -REPORT_NDIFF

>>> v.views[:2]
    (<class 'Products.COL3.browser.workgroup.WorkspaceCreationView'>,
     <class 'Products.COL3.browser.workgroup.WorkspaceCreationForm'>)

As shown above, the first 2 fragments render a 'view' tag and a
'formcontroller' tag. The other tags are the standard fare for site views like
the 'resource' and the logged in user information.

The 'view' tag specifies the standard type, name and title attributes of the view,
but it also sports a <step> tag specifying which step of the wizard we're in:

    >>> print tostring(tree[0]) # doctest: +XMLDATA
    <view name="add.html" type="workspace" section="workspaces" 
          title="Create a Workspace" />

Notice that this view is not available for anonymous:

    >>> self.logout()
    >>> context.restrictedTraverse("@@add-workspace.html")
    Traceback (most recent call last):
    ...
    Unauthorized: ...

Only for those with the "Comunity Member" role

    >>> self.login()
    >>> self.setRoles(['Member','Community Member'])
    >>> context.restrictedTraverse("@@add-workspace.html")
    <...WorkspaceCreationPage object at ...>

The form in this page asks all the information necessary for the creation of
0the workspace:

    >>> print tostring(tree.find('formcontroller')) # doctest: +XMLDATA
    <formcontroller action="http://foo">
    <field name="form.title" required="required" widget="text">
        <label>Workspace Name (up to 50 characters)</label>
        <description>Examples: Colorado Federal Public Lands Strategy, Western State Trust Lands, Kenya's Biodiversity Mapping Project.</description>
    </field>
    <field name="form.id" required="required" widget="text">
        <label>Web Site Address (up to 25 characters)</label>
        <description>A shorter name is better for your web site address. Example: If your workspace is called Colorado Federal Public Lands, your web site address might be "copubliclands". The full URL for the workspace would then be http://conserveonline.org/workspaces/copubliclands.</description>
    </field>
    <field name="form.description" widget="textarea">
        <label>What is the purpose, goal, or mission statement for your workspace? (up to 250 characters)</label>
        <description>This description will appear on the home page of your workspace</description>
    </field>
    <field name="form.country" required="required" widget="selection">
        <label>What region or country is your work based in?</label>
        <value vocabulary="countries" xml:space="preserve">USA</value>
    </field>
    <field name="form.biogeographic_realm" required="required" widget="selection">
        <label>What biogeographic realm is your work based in?</label>
        <value vocabulary="biogeographic_realms" xml:space="preserve">nearctic</value>
    </field>
    <field name="form.habitat" widget="checkboxgroup">
        <label>Habitat type</label>
        <value vocabulary="habitats"/>
    </field>
    <field name="form.conservation" widget="checkboxgroup">
        <label>Conservation action</label>
        <value vocabulary="conservation"/>
    </field>
    <field name="form.directthreat" widget="checkboxgroup">
        <label>Direct threat</label>
        <value vocabulary="directthreat"/>
    </field>
    <field name="form.monitoring" widget="checkboxgroup">
        <label>Monitoring type</label>
        <description>The methods used to determine whether the conservation actions described in this document are succeeding
        </description>
        <value vocabulary="monitoring"/>
    </field>
    <field name="form.organization" widget="text">
        <label>Organization</label>
        <description>Examples: The Nature Conservancy, World Wildlife Fund, IUCN.</description>
    </field>
    <field name="form.is_private" required="required" widget="radiogroup">
        <label>Is the workspace public or private?</label>
        <value>
            <option selected="selected" value="False">Public, everyone can see content not made private.</option>
            <option value="True">Private, only workspace members can see content.</option>
        </value>
    </field>
    <field name="form.keywords" widget="text">
        <label>Other Search Terms</label>
        <description>Examples: biodiversity, freshwater, Natural Heritage Programs, panthera leo</description>
    </field>
    <field name="form.license" required="required" widget="selection">
        <label>License</label>
        <value vocabulary="licenses" xml:space="preserve">a-nc</value>
    </field>
    <submit name="form.actions.create">Create</submit>
    <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

So now we want the form values to show up when the form is submitted, so let's
simulate a submitted request to it. First let's use a uppercase value for the
"id" field:

    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> request.form['form.title'] = u'My Workspace'
    >>> request.form['form.id'] = u'MyWorkspace'
    >>> request.form['form.description'] = u'My Workspace Description'
    >>> request.form['form.country'] = u'BRA'
    >>> request.form['form.biogeographic_realm'] = u'indomalay'
    >>> request.form['form.directthreat-empty-marker'] = u'1'
    >>> request.form['form.conservation-empty-marker'] = u'1'
    >>> request.form['form.habitat-empty-marker'] = u'1'
    >>> request.form['form.is_private'] = u'False'
    >>> request.form['form.license'] = 'a-nc'
    >>> request.form['form.actions.create'] = 'Create'
    >>> view = context.unrestrictedTraverse("@@add-workspace.html")
    >>> print tostring(view.getResponse().find('formcontroller'))
    ... # doctest: +XMLDATA
    <formcontroller action="http://foo">
      <error>There were errors</error>
      <field name="form.title" required="required" widget="text">
        <label>Workspace Name (up to 50 characters)</label>
        <description>Examples: Colorado Federal Public Lands Strategy, Western State Trust Lands, Kenya's Biodiversity Mapping Project.</description>
        <value xml:space="preserve">My Workspace</value>
      </field>
      <field name="form.id" required="required" widget="text">
        <label>Web Site Address (up to 25 characters)</label>
        <description>A shorter name is better for your web site address. Example: If your workspace is called Colorado Federal Public Lands, your web site address might be "copubliclands". The full URL for the workspace would then be http://conserveonline.org/workspaces/copubliclands.</description>
        <value xml:space="preserve">MyWorkspace</value>
        <error>The domain must be all lowercase, start with a letter or digit and may contain dots or dashes.</error>
      </field>
      <field name="form.description" widget="textarea">
        <label>What is the purpose, goal, or mission statement for your workspace? (up to 250 characters)</label>
        <description>This description will appear on the home page of your workspace</description>
        <value xml:space="preserve">My Workspace Description</value>
      </field>
      <field name="form.country" required="required" widget="selection">
        <label>What region or country is your work based in?</label>
        <value vocabulary="countries" xml:space="preserve">BRA</value>
      </field>
      <field name="form.biogeographic_realm" required="required" widget="selection">
        <label>What biogeographic realm is your work based in?</label>
        <value vocabulary="biogeographic_realms" xml:space="preserve">indomalay</value>
      </field>
      <field name="form.habitat" widget="checkboxgroup">
        <label>Habitat type</label>
        <value vocabulary="habitats"/>
      </field>
      <field name="form.conservation" widget="checkboxgroup">
        <label>Conservation action</label>
        <value vocabulary="conservation"/>
      </field>
      <field name="form.directthreat" widget="checkboxgroup">
        <label>Direct threat</label>
        <value vocabulary="directthreat"/>
      </field>
      <field name="form.monitoring" widget="checkboxgroup">
        <label>Monitoring type</label>
        <description>The methods used to determine whether the conservation actions described in this document are succeeding</description>
        <value vocabulary="monitoring"/>
      </field>
      <field name="form.organization" widget="text">
		  <label>Organization</label>
		  <description>Examples: The Nature Conservancy, World Wildlife Fund, IUCN.</description>
      </field>
      <field name="form.is_private" required="required" widget="radiogroup">
            <label>Is the workspace public or private?</label>
            <value>
                <option selected="selected" value="False">Public, everyone can see content not made private.</option>
                <option value="True">Private, only workspace members can see content.</option>
            </value>
      </field>
      <field name="form.keywords" widget="text">
        <label>Other Search Terms</label>
        <description>Examples: biodiversity, freshwater, Natural Heritage Programs, panthera leo</description>
      </field>
      <field name="form.license" required="required" widget="selection">
        <label>License</label>
        <value vocabulary="licenses" xml:space="preserve">a-nc</value>
      </field>
      <submit name="form.actions.create">Create</submit>
      <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

Submitting the correct information results in the creation of the workspace and
a redirect.

    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> request.form['form.title'] = 'My Workspace'
    >>> request.form['form.id'] = 'myworkspace'
    >>> request.form['form.description'] = 'My Workspace Description'
    >>> request.form['form.country'] = u'BRA'
    >>> request.form['form.biogeographic_realm'] = u'indomalay'
    >>> request.form['form.habitat'] = u'caves'
    >>> request.form['form.conservation'] = u'education'
    >>> request.form['form.directthreat'] = u'biological'
    >>> request.form['form.monitoring'] = u'none'
    >>> request.form['form.organization'] = u'Not Much'
    >>> request.form['form.is_private'] = u'False'
    >>> request.form['form.license'] = 'a-nc'
    >>> request.form['form.actions.create'] = 'Create'
    >>> view = context.unrestrictedTraverse("@@add-workspace.html")
    >>> print tostring(view.getResponse()[1])
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/myworkspace/wsmembers/workspace-members.html

Let's check the workspace was created correctly.

    >>> workspace = context['myworkspace']
    >>> IWorkspace.providedBy(workspace)
    True

Creating a workspace with the same title as the workspace above should result in in
InvalidWorkspaceTitleException being thrown which would causes an error message to be
added to the title field section of the formcontroller segment.

    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> request.form['form.title'] = 'My Workspace'
    >>> request.form['form.id'] = 'myworkspace'
    >>> request.form['form.description'] = 'My Workspace Description'
    >>> request.form['form.country'] = u'BRA'
    >>> request.form['form.biogeographic_realm'] = u'indomalay'
    >>> request.form['form.habitat'] = u'caves'
    >>> request.form['form.conservation'] = u'education'
    >>> request.form['form.directthreat'] = u'biological'
    >>> request.form['form.monitoring'] = u'none'
    >>> request.form['form.organization'] = u'Not Much'
    >>> request.form['form.is_private'] = u'False'
    >>> request.form['form.license'] = 'a-nc'
    >>> request.form['form.actions.create'] = 'Create'
    >>> view = context.unrestrictedTraverse("@@add-workspace.html")
    >>> print tostring(view.getResponse()[1]) #doctest: +XMLDATA
    <formcontroller action="http://foo">
      <error>There were errors</error>
       <field name="form.title" required="required" widget="text">
         <label>Workspace Name (up to 50 characters)</label>
         <description>Examples: Colorado Federal Public Lands Strategy, Western State Trust Lands, Kenya's Biodiversity Mapping Project.</description>
         <value xml:space="preserve">My Workspace</value>
         <error>Workspace title already exists, please enter another title.</error>
       </field>
       <field name="form.id" required="required" widget="text">
         <label>Web Site Address (up to 25 characters)</label>
         <description>A shorter name is better for your web site address. Example: If your workspace is called Colorado Federal Public Lands, your web site address might be "copubliclands". The full URL for the workspace would then be http://conserveonline.org/workspaces/copubliclands.</description>
         <value xml:space="preserve">myworkspace</value>
         <error>This domain already exists.</error>
       </field>
       <field name="form.description" widget="textarea">
         <label>What is the purpose, goal, or mission statement for your workspace? (up to 250 characters)</label>
         <description>This description will appear on the home page of your workspace</description>
         <value xml:space="preserve">My Workspace Description</value>
       </field>
       <field name="form.country" required="required" widget="selection">
         <label>What region or country is your work based in?</label>
         <value vocabulary="countries" xml:space="preserve">BRA</value>
       </field>
       <field name="form.biogeographic_realm" required="required" widget="selection">
         <label>What biogeographic realm is your work based in?</label>
         <value vocabulary="biogeographic_realms" xml:space="preserve">indomalay</value>
       </field>
       <field name="form.habitat" widget="checkboxgroup">
         <label>Habitat type</label>
         <value vocabulary="habitats">
           <selected id="caves"/>
         </value>
       </field>
       <field name="form.conservation" widget="checkboxgroup">
         <label>Conservation action</label>
         <value vocabulary="conservation">
           <selected id="education"/>
         </value>
       </field>
       <field name="form.directthreat" widget="checkboxgroup">
         <label>Direct threat</label>
         <value vocabulary="directthreat">
           <selected id="biological"/>
         </value>
       </field>
       <field name="form.monitoring" widget="checkboxgroup">
         <label>Monitoring type</label>
         <description>The methods used to determine whether the conservation actions described in this document are succeeding</description>
         <value vocabulary="monitoring">
           <selected id="none"/>
         </value>
       </field>
       <field name="form.organization" widget="text">
         <label>Organization</label>
         <description>Examples: The Nature Conservancy, World Wildlife Fund, IUCN.</description>
         <value xml:space="preserve">Not Much</value>
       </field>
       <field name="form.is_private" required="required" widget="radiogroup">
         <label>Is the workspace public or private?</label>
         <value>
           <option selected="selected" value="False">Public, everyone can see content not made private.</option>
           <option value="True">Private, only workspace members can see content.</option>
         </value>
       </field>
       <field name="form.keywords" widget="text">
         <label>Other Search Terms</label>
         <description>Examples: biodiversity, freshwater, Natural Heritage Programs, panthera leo</description>
       </field>
       <field name="form.license" required="required" widget="selection">
         <label>License</label>
         <value vocabulary="licenses" xml:space="preserve">a-nc</value>
       </field>
       <submit name="form.actions.create">Create</submit>
       <submit name="form.actions.cancel">Cancel</submit>
    </formcontroller>

And that we can access the view we redirected to above:

   >>> workspace.restrictedTraverse("wsmembers/workspace-members.html")
   <...MembershipManagementPage object at...>

It should have the title and description we specified above:

    >>> print workspace.Title()
    My Workspace
    >>> print workspace.Description()
    My Workspace Description

It should have some standard content structure already in it:

    >>> from Products.Ploneboard.interfaces import IForum
    >>> from Products.COL3.interfaces.workspace import IWorkspaceCalendar
    >>> from Products.COL3.interfaces.workspace import IWorkspaceDocumentsFolder
    >>> IForum.providedBy(workspace.discussion)
    True
    >>> IWorkspaceCalendar.providedBy(workspace.calendar)
    True
    >>> IWorkspaceDocumentsFolder.providedBy(workspace.documents)
    True

Since the workspace we created is public, it needs to be accessible by
anonymous users by default:

    >>> self.logout()
    >>> print queryDefaultViewName(workspace, request)
    view-workspace.html
    >>> workspace.restrictedTraverse('@@view-workspace.html')
    <...WorkspacePage object at ...>

The creation of this workspace also creates two groups that are used to
control access of workspace managers and members, one for Managers

    >>> list(workspace.get_local_roles_for_userid('myworkspaceadmins'))
    ['Workspace Administrator']

And one for workspace members

    >>> list(workspace.get_local_roles_for_userid('myworkspacemembers'))
    ['Workspace Member']

Other workspace managers should be able to switch the state of this workspace
between public and private:

    >>> properties = dict(username='user1',
    ...                   firstname='New',
    ...                   lastname='User1',
    ...                   email="user1@example.com",
    ...                   type_of_organization="Comercial",
    ...                   organization="Enfold Systems",
    ...                   country="Brazil",
    ...                  )
    >>> registration_tool = getToolByName(app.plone, 'portal_registration')
    >>> registration_tool.addMember('user1',
    ...                             'somepasswd',
    ...                             properties=properties.copy()               
    ...                            ) and None
    >>> app.plone.manage_setLocalRoles('user1', ['Community Member'])
    >>> wm = IWorkspaceMemberManagement(workspace)
    >>> wm.addManager(self.portal.portal_membership.getMemberById('user1'))
    >>> self.login('user1')
    >>> workspace.setIs_private(True)

Removing the workspace should remove the group from the list of groups:

    >>> 'myworkspaceadmins' in self.portal.acl_users.getGroupNames()
    True
    >>> 'myworkspacemembers' in self.portal.acl_users.getGroupNames()
    True
    >>> context._delObject('myworkspace')
    >>> 'myworkspaceadmins' in self.portal.acl_users.getGroupNames()
    False
    >>> 'myworkspacemembers' in self.portal.acl_users.getGroupNames()
    False

If we create the workspace as private...

    >>> self.login()
    >>> self.setRoles(['Member','Community Member'])
    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> request.form['form.title'] = 'My Private Workspace'
    >>> request.form['form.id'] = 'privworkspace'
    >>> request.form['form.description'] = 'My Private Workspace Description'
    >>> request.form['form.country'] = u'BRA'
    >>> request.form['form.biogeographic_realm'] = u'indomalay'
    >>> request.form['form.habitat'] = u'caves'
    >>> request.form['form.conservation'] = u'education'
    >>> request.form['form.directthreat'] = u'biological'
    >>> request.form['form.monitoring'] = u'none'
    >>> request.form['form.organization'] = u'Not Much'
    >>> request.form['form.is_private'] = u'True'
    >>> request.form['form.license'] = 'a-nc'
    >>> request.form['form.actions.create'] = 'Create'
    >>> view = context.unrestrictedTraverse("@@add-workspace.html")
    >>> print tostring(view.getResponse()[1])
    Traceback (most recent call last):
    ...
    SafeRedirect: http://foo/plone/workspaces/privworkspace/wsmembers/workspace-members.html

Anonymous users shouldn't be able to look at it:

    >>> self.logout()
    >>> context, request = prepWorkspaceContainerAndRequest()
    >>> context.restrictedTraverse('privworkspace/@@view-workspace.html')
    Traceback (most recent call last):
    ...
    Unauthorized: ...

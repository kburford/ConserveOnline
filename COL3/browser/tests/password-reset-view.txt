Password reset view tests
~~~~~~~~~~~~~~~~~~~~~~~~~

These tests ensure expected functionality for the view class used by the 
COL3 password reset form.

  >>> portal = self.portal

Create the browser object we'll be using.

  >>> from Products.Five.testbrowser import Browser
  >>> browser = Browser()
  >>> browser.handleErrors = False

Defining some convenience functions

  >>> def fillIn(field, value):
  ...     browser.getControl(field).value = value

  >>> def fillInByName(field, value):
  ...     browser.getControl(name='form.%s' % field).value = value

  >>> def select(field):
  ...     browser.getControl(field).selected = True

  >>> def click(field):
  ...     browser.getControl(field).click()

  >>> def getCaptchaSolution(portal, hash):
  ...     from Products.qPloneCaptchas.utils import decrypt
  ...     from Products.qPloneCaptchas.utils import getWord
  ...     from Products.qPloneCaptchas.utils import parseKey
  ...     captcha_key = portal.captcha_key
  ...     return getWord(int(parseKey(decrypt(captcha_key, hash))['key']))

  >>> def testCredentials(login, password):
  ...     creds = {'login':login, 'password':password}
  ...     result = portal.acl_users.source_users.authenticateCredentials(creds)
  ...     if result == (login, login):
  ...         return True
  ...     return False

We will create a new member for this purpose, with the login "newuser" and the password "supersecret".

  >>> test_user = 'newuser'
  >>> test_password = 'supersecret'

  >>> browser.open('http://localhost/plone/register.html')
  >>> hash = browser.getControl(name='form.keyhash', index=1).value
  >>> solution = getCaptchaSolution(portal, hash)
  >>> fillIn('User Name', 'newuser')
  >>> fillIn('Full Name', 'New User')
  >>> fillIn('E-mail', 'newuser@example.com')
  >>> fillIn('Password', test_password)
  >>> fillIn('Confirm password', test_password)
  >>> fillInByName('type_of_organization', ['Government'])
  >>> fillInByName('organization', 'My Organization')
  >>> fillIn('Country', ['Albania'])
  >>> select('I agree to these terms and conditions')
  >>> fillInByName('key', solution)
  >>> click('Add')
 
First off, set up a request with missing form data. The password will remain
unchanged.

  >>> browser.open('http://localhost/plone/resetpassword.html')
  >>> click('Reset Password')
  >>> browser.url
  'http://localhost/plone/resetpassword.html'
  >>> 'Required input is missing.' in browser.contents
  True
  >>> testCredentials(test_user, test_password)
  True

Now we provide values, but mistype the Captcha.

  >>> browser.open('http://localhost/plone/resetpassword.html')
  >>> hash = browser.getControl(name='form.keyhash', index=1).value
  >>> solution = getCaptchaSolution(portal, hash)
  >>> fillIn('Login', test_user)
  >>> fillInByName('key', 'wrong solution')
  >>> click('Reset Password')
  >>> browser.url
  'http://localhost/plone/resetpassword.html'
  >>> 'Required input is missing.' in browser.contents
  False
  >>> testCredentials(test_user, test_password)
  True

If the login does not exist, an error is raised.

  >>> browser.open('http://localhost/plone/resetpassword.html')
  >>> hash = browser.getControl(name='form.keyhash', index=1).value
  >>> solution = getCaptchaSolution(portal, hash)
  >>> fillIn('Login', 'unknown')
  >>> fillInByName('key', solution)
  >>> click('Reset Password')
  >>> browser.url
  'http://localhost/plone/resetpassword.html'
  >>> 'Required input is missing.' in browser.contents
  False
  >>> 'This login does not exist.' in browser.contents
  True
  >>> testCredentials(test_user, test_password)
  True

Now all values are correct and the password is changed.

  >>> browser.open('http://localhost/plone/resetpassword.html')
  >>> hash = browser.getControl(name='form.keyhash', index=1).value
  >>> solution = getCaptchaSolution(portal, hash)
  >>> fillIn('Login', test_user)
  >>> fillInByName('key', solution)
  >>> click('Reset Password')
  >>> browser.url
  'http://localhost/plone/resetpassworddone.html'
